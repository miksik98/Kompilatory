
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADDSUBleftMULDIVrightUMINUSADD ADDASSIGN ASSIGN BREAK COMMA COMMENT CONTINUE DIV DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUALITY EYE FLOATNUM FOR GREATER GREATER_EQUAL ID IF INEQUALITY INTNUM LESS LESS_EQUAL LPAREN LPARENCURLY LPARENSQUARE MATRIX MUL MULASSIGN ONES PRINT RANGE RETURN RPAREN RPARENCURLY RPARENSQUARE SEMICOLON STRING SUB SUBASSIGN TRANSPOSE WHILE ZEROSmain_statements : LPARENCURLY statements RPARENCURLY main_statements\n                      | main_statements LPARENCURLY statements RPARENCURLY\n                      | main_statements main_statements\n                      | statementsmain_statements : loop_statementloop_statement : WHILE LPAREN condition RPAREN loop_instruction_statement\n                      | FOR ID ASSIGN num_expression RANGE num_expression loop_instruction_statementmain_statements : if_statementelse_statement : ELSE instruction_statement\n                      | ELSE if_statementif_statement : IF LPAREN condition RPAREN instruction_statement\n                    | IF LPAREN condition RPAREN instruction_statement else_statementloop_instruction_statement : LPARENCURLY main_statements_break_continue RPARENCURLY\n                                  | statement SEMICOLON\n                                  | BREAK SEMICOLON\n                                  | CONTINUE SEMICOLON\n                                  | loop_statementmain_statements_break_continue : main_statements\n                                      | if_break_continue\n                                      | main_statements_break_continue main_statements_break_continue\n                                      | main_statements_break_continue CONTINUE SEMICOLON main_statements_break_continue\n                                      | main_statements_break_continue BREAK SEMICOLON main_statements_break_continue\n                                      | emptyelse_break_continue : ELSE instruction_statement_break_continue\n                           | ELSE if_break_continueif_break_continue : IF LPAREN condition RPAREN instruction_statement_break_continue\n                         | IF LPAREN condition RPAREN instruction_statement_break_continue else_break_continueinstruction_statement_break_continue : LPARENCURLY main_statements_break_continue RPARENCURLY\n                                            | LPARENCURLY empty RPARENCURLY\n                                            | statement SEMICOLON\n                                            | BREAK SEMICOLON\n                                            | CONTINUE SEMICOLONinstruction_statement : LPARENCURLY main_statements RPARENCURLY\n                             | LPARENCURLY empty RPARENCURLY\n                             | statement SEMICOLONcondition : num_expression EQUALITY num_expression\n                 | num_expression INEQUALITY num_expression\n                 | num_expression GREATER num_expression\n                 | num_expression GREATER_EQUAL num_expression\n                 | num_expression LESS num_expression\n                 | num_expression LESS_EQUAL num_expressionstatements : statement SEMICOLON statements\n                  | statement SEMICOLONstatement : PRINT print_expressionprint_expression : expression\n                        | print_expression COMMA print_expressionexpression : num_expression\n                  | matrix_expression\n                  | STRINGstatement : ID ASSIGN STRINGstatement : ID MATRIX ASSIGN num_expressionstatement : ID MATRIX ADDASSIGN num_expression\n                 | ID MATRIX SUBASSIGN num_expression\n                 | ID MATRIX MULASSIGN num_expression\n                 | ID MATRIX DIVASSIGN num_expressionstatement : ID ASSIGN num_expressionstatement : ID ADDASSIGN num_expression\n                  | ID SUBASSIGN num_expression\n                  | ID MULASSIGN num_expression\n                  | ID DIVASSIGN num_expressionnum_expression : IDmatrix_expression : IDnum_expression : LPAREN num_expression RPARENmatrix_expression : LPAREN matrix_expression RPARENnum_expression : num_expression ADD num_expression\n                  | num_expression SUB num_expression\n                  | num_expression MUL num_expression\n                  | num_expression DIV num_expressionmatrix_expression : matrix_expression ADD matrix_expression\n                  | matrix_expression SUB matrix_expression\n                  | matrix_expression MUL matrix_expression\n                  | matrix_expression DIV matrix_expressionmatrix_expression : matrix_expression DOTADD matrix_expression\n                  | matrix_expression DOTSUB matrix_expression\n                  | matrix_expression DOTMUL matrix_expression\n                  | matrix_expression DOTDIV matrix_expressionstatement : ID ASSIGN matrix_expressionstatement : ID ADDASSIGN matrix_expression\n                  | ID SUBASSIGN matrix_expression\n                  | ID MULASSIGN matrix_expression\n                  | ID DIVASSIGN matrix_expressionnum_expression : SUB num_expression %prec UMINUSmatrix_expression : SUB matrix_expression %prec UMINUSmatrix_expression : matrix_expression TRANSPOSEnum_expression : INTNUM\n                      | FLOATNUMmatrix_expression : ZEROS LPAREN INTNUM RPARENmatrix_expression : ONES LPAREN INTNUM RPARENmatrix_expression : EYE LPAREN INTNUM RPARENmatrix_expression : MATRIXstatement : return_statementreturn_statement : RETURN expressionempty :'
    
_lr_action_items = {'LPARENCURLY':([0,1,3,4,5,14,17,35,36,43,44,48,84,89,90,91,104,106,107,108,109,121,126,127,131,139,140,145,146,147,148,150,151,152,153,154,155,156,158,159,160,164,165,166,167,168,169,170,172,173,174,175,176,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,198,200,],[2,15,-4,-5,-8,15,-43,-85,-86,2,-42,-61,-82,2,15,127,140,-65,-66,-67,-68,-63,-6,2,-17,-11,2,2,15,-19,-23,-14,-15,-16,127,-12,140,15,-35,2,-13,-7,-9,-10,-33,-34,2,2,2,2,176,-26,2,-27,190,2,-23,15,-30,-31,-32,-24,-25,2,-28,-29,-23,-30,-29,190,]),'WHILE':([0,1,3,4,5,14,17,35,36,43,44,48,84,89,90,91,106,107,108,109,121,126,127,131,139,140,145,146,147,148,150,151,152,153,154,156,158,159,160,164,165,166,167,168,169,170,172,173,175,176,180,182,183,184,185,186,187,188,189,190,193,194,195,196,198,],[7,7,-4,-5,-8,7,-43,-85,-86,7,-42,-61,-82,7,7,7,-65,-66,-67,-68,-63,-6,7,-17,-11,7,7,7,-19,-23,-14,-15,-16,7,-12,7,-35,7,-13,-7,-9,-10,-33,-34,7,7,7,7,-26,7,-27,7,-23,7,-30,-31,-32,-24,-25,7,-28,-29,-23,-30,-29,]),'FOR':([0,1,3,4,5,14,17,35,36,43,44,48,84,89,90,91,106,107,108,109,121,126,127,131,139,140,145,146,147,148,150,151,152,153,154,156,158,159,160,164,165,166,167,168,169,170,172,173,175,176,180,182,183,184,185,186,187,188,189,190,193,194,195,196,198,],[8,8,-4,-5,-8,8,-43,-85,-86,8,-42,-61,-82,8,8,8,-65,-66,-67,-68,-63,-6,8,-17,-11,8,8,8,-19,-23,-14,-15,-16,8,-12,8,-35,8,-13,-7,-9,-10,-33,-34,8,8,8,8,-26,8,-27,8,-23,8,-30,-31,-32,-24,-25,8,-28,-29,-23,-30,-29,]),'IF':([0,1,3,4,5,14,17,43,44,89,90,126,127,131,139,140,145,146,147,148,150,151,152,154,155,156,158,159,160,164,165,166,167,168,169,170,172,173,175,176,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,198,],[10,10,-4,-5,-8,10,-43,10,-42,10,10,-6,149,-17,-11,10,149,10,-19,-23,-14,-15,-16,-12,10,10,-35,149,-13,-7,-9,-10,-33,-34,149,149,149,149,-26,149,-27,192,149,-23,10,-30,-31,-32,-24,-25,149,-28,-29,-23,-30,-29,]),'PRINT':([0,1,2,3,4,5,14,15,17,35,36,43,44,48,84,89,90,91,104,106,107,108,109,121,126,127,131,139,140,145,146,147,148,150,151,152,153,154,155,156,158,159,160,164,165,166,167,168,169,170,172,173,174,175,176,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,198,200,],[11,11,11,-4,-5,-8,11,11,11,-85,-86,11,-42,-61,-82,11,11,11,11,-65,-66,-67,-68,-63,-6,11,-17,-11,11,11,11,-19,-23,-14,-15,-16,11,-12,11,11,-35,11,-13,-7,-9,-10,-33,-34,11,11,11,11,11,-26,11,-27,11,11,-23,11,-30,-31,-32,-24,-25,11,-28,-29,-23,-30,-29,11,]),'ID':([0,1,2,3,4,5,8,11,13,14,15,17,18,20,22,23,24,25,26,33,34,35,36,43,44,45,48,49,50,54,55,56,57,58,68,69,70,71,72,73,74,75,76,77,78,79,80,84,89,90,91,92,93,94,95,96,97,104,106,107,108,109,112,113,121,126,127,131,138,139,140,145,146,147,148,150,151,152,153,154,155,156,158,159,160,163,164,165,166,167,168,169,170,172,173,174,175,176,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,197,198,200,],[9,9,9,-4,-5,-8,19,32,32,9,9,9,48,32,32,32,32,32,48,32,32,-85,-86,9,-42,48,-61,48,48,48,48,48,48,48,32,48,48,48,48,111,111,111,111,111,111,111,111,-82,9,9,9,48,48,48,48,48,48,9,-65,-66,-67,-68,111,111,-63,-6,9,-17,48,-11,9,9,9,-19,-23,-14,-15,-16,9,-12,9,9,-35,9,-13,48,-7,-9,-10,-33,-34,9,9,9,9,9,-26,9,-27,9,9,-23,9,-30,-31,-32,-24,-25,9,-28,-29,-23,-30,48,-29,9,]),'RETURN':([0,1,2,3,4,5,14,15,17,35,36,43,44,48,84,89,90,91,104,106,107,108,109,121,126,127,131,139,140,145,146,147,148,150,151,152,153,154,155,156,158,159,160,164,165,166,167,168,169,170,172,173,174,175,176,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,198,200,],[13,13,13,-4,-5,-8,13,13,13,-85,-86,13,-42,-61,-82,13,13,13,13,-65,-66,-67,-68,-63,-6,13,-17,-11,13,13,13,-19,-23,-14,-15,-16,13,-12,13,13,-35,13,-13,-7,-9,-10,-33,-34,13,13,13,13,13,-26,13,-27,13,13,-23,13,-30,-31,-32,-24,-25,13,-28,-29,-23,-30,-29,13,]),'$end':([1,3,4,5,14,17,44,89,90,126,131,139,150,151,152,154,158,160,164,165,166,167,168,],[0,-4,-5,-8,-3,-43,-42,-2,-1,-6,-17,-11,-14,-15,-16,-12,-35,-13,-7,-9,-10,-33,-34,]),'RPARENCURLY':([3,4,5,14,16,17,42,44,89,90,126,127,131,139,140,145,146,147,148,150,151,152,154,156,157,158,159,160,164,165,166,167,168,169,170,172,173,175,176,180,182,183,184,185,186,187,188,189,190,193,194,195,196,198,],[-4,-5,-8,-3,43,-43,89,-42,-2,-1,-6,-93,-17,-11,-93,160,-18,-19,-23,-14,-15,-16,-12,167,168,-35,-20,-13,-7,-9,-10,-33,-34,-93,-93,-21,-22,-26,-93,-27,193,194,167,-30,-31,-32,-24,-25,-93,-28,-29,198,-30,-29,]),'CONTINUE':([3,4,5,14,17,35,36,44,48,84,89,90,91,106,107,108,109,121,126,127,131,139,145,146,147,148,150,151,152,153,154,158,159,160,164,165,166,167,168,169,170,172,173,174,175,176,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,198,200,],[-4,-5,-8,-3,-43,-85,-86,-42,-61,-82,-2,-1,130,-65,-66,-67,-68,-63,-6,-93,-17,-11,161,-18,-19,-23,-14,-15,-16,130,-12,-35,161,-13,-7,-9,-10,-33,-34,-93,-93,161,161,179,-26,-93,-27,179,161,-23,-18,-30,-31,-32,-24,-25,-93,-28,-29,-23,-30,-29,179,]),'BREAK':([3,4,5,14,17,35,36,44,48,84,89,90,91,106,107,108,109,121,126,127,131,139,145,146,147,148,150,151,152,153,154,158,159,160,164,165,166,167,168,169,170,172,173,174,175,176,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,198,200,],[-4,-5,-8,-3,-43,-85,-86,-42,-61,-82,-2,-1,129,-65,-66,-67,-68,-63,-6,-93,-17,-11,162,-18,-19,-23,-14,-15,-16,129,-12,-35,162,-13,-7,-9,-10,-33,-34,-93,-93,162,162,178,-26,-93,-27,178,162,-23,-18,-30,-31,-32,-24,-25,-93,-28,-29,-23,-30,-29,178,]),'SEMICOLON':([6,12,27,28,29,30,31,32,35,36,40,41,48,51,52,53,59,60,61,62,63,64,65,66,81,84,85,99,100,101,102,103,105,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,128,129,130,141,142,143,144,161,162,177,178,179,191,],[17,-91,-44,-45,-47,-48,-49,-61,-85,-86,-90,-92,-61,-50,-56,-77,-57,-78,-58,-79,-59,-80,-60,-81,-84,-82,-83,-51,-52,-53,-54,-55,-46,-65,-66,-67,-68,-69,-62,-70,-71,-72,-73,-74,-75,-76,-63,-64,150,151,152,158,-87,-88,-89,169,170,185,186,187,196,]),'LPAREN':([7,10,11,13,18,20,22,23,24,25,26,33,34,37,38,39,45,49,50,54,55,56,57,58,68,69,70,71,72,73,74,75,76,77,78,79,80,92,93,94,95,96,97,112,113,138,149,163,192,197,],[18,26,33,33,45,33,33,33,33,33,45,33,33,86,87,88,45,45,45,45,45,45,45,45,33,45,45,45,45,112,112,112,112,112,112,112,112,45,45,45,45,45,45,112,112,45,163,45,197,45,]),'ASSIGN':([9,19,21,],[20,50,54,]),'MATRIX':([9,11,13,20,22,23,24,25,33,34,68,73,74,75,76,77,78,79,80,112,113,],[21,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ADDASSIGN':([9,21,],[22,55,]),'SUBASSIGN':([9,21,],[23,56,]),'MULASSIGN':([9,21,],[24,57,]),'DIVASSIGN':([9,21,],[25,58,]),'STRING':([11,13,20,68,],[31,31,51,31,]),'SUB':([11,13,18,20,22,23,24,25,26,29,30,32,33,34,35,36,40,45,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,94,95,96,97,98,99,100,101,102,103,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,133,134,135,136,137,138,142,143,144,153,163,197,],[34,34,49,34,34,34,34,34,49,70,74,-61,34,34,-85,-86,-90,49,70,-61,49,49,70,74,49,49,49,49,49,70,74,70,74,70,74,70,74,34,49,49,49,49,113,113,113,113,113,113,113,113,-84,70,74,-82,-83,49,49,49,49,49,49,70,70,70,70,70,70,-65,-66,-67,-68,-69,-62,113,113,-70,-71,-72,74,74,74,74,-63,-64,70,70,70,70,70,70,49,-87,-88,-89,70,49,49,]),'INTNUM':([11,13,18,20,22,23,24,25,26,33,34,45,49,50,54,55,56,57,58,68,69,70,71,72,86,87,88,92,93,94,95,96,97,138,163,197,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,123,124,125,35,35,35,35,35,35,35,35,35,]),'FLOATNUM':([11,13,18,20,22,23,24,25,26,33,34,45,49,50,54,55,56,57,58,68,69,70,71,72,92,93,94,95,96,97,138,163,197,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'ZEROS':([11,13,20,22,23,24,25,33,34,68,73,74,75,76,77,78,79,80,112,113,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'ONES':([11,13,20,22,23,24,25,33,34,68,73,74,75,76,77,78,79,80,112,113,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'EYE':([11,13,20,22,23,24,25,33,34,68,73,74,75,76,77,78,79,80,112,113,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'COMMA':([27,28,29,30,31,32,35,36,40,48,81,84,85,105,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,142,143,144,],[68,-45,-47,-48,-49,-61,-85,-86,-90,-61,-84,-82,-83,68,-65,-66,-67,-68,-69,-62,-70,-71,-72,-73,-74,-75,-76,-63,-64,-87,-88,-89,]),'ADD':([29,30,32,35,36,40,47,48,52,53,59,60,61,62,63,64,65,66,81,82,83,84,85,98,99,100,101,102,103,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,132,133,134,135,136,137,142,143,144,153,],[69,73,-61,-85,-86,-90,69,-61,69,73,69,73,69,73,69,73,69,73,-84,69,73,-82,-83,69,69,69,69,69,69,-65,-66,-67,-68,-69,-62,-70,-71,-72,73,73,73,73,-63,-64,69,69,69,69,69,69,-87,-88,-89,69,]),'MUL':([29,30,32,35,36,40,47,48,52,53,59,60,61,62,63,64,65,66,81,82,83,84,85,98,99,100,101,102,103,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,132,133,134,135,136,137,142,143,144,153,],[71,75,-61,-85,-86,-90,71,-61,71,75,71,75,71,75,71,75,71,75,-84,71,75,-82,-83,71,71,71,71,71,71,71,71,-67,-68,75,-62,75,-71,-72,75,75,75,75,-63,-64,71,71,71,71,71,71,-87,-88,-89,71,]),'DIV':([29,30,32,35,36,40,47,48,52,53,59,60,61,62,63,64,65,66,81,82,83,84,85,98,99,100,101,102,103,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,132,133,134,135,136,137,142,143,144,153,],[72,76,-61,-85,-86,-90,72,-61,72,76,72,76,72,76,72,76,72,76,-84,72,76,-82,-83,72,72,72,72,72,72,72,72,-67,-68,76,-62,76,-71,-72,76,76,76,76,-63,-64,72,72,72,72,72,72,-87,-88,-89,72,]),'DOTADD':([30,32,40,53,60,62,64,66,81,83,85,110,111,114,115,116,117,118,119,120,122,142,143,144,],[77,-62,-90,77,77,77,77,77,-84,77,-83,-69,-62,-70,-71,-72,77,77,77,77,-64,-87,-88,-89,]),'DOTSUB':([30,32,40,53,60,62,64,66,81,83,85,110,111,114,115,116,117,118,119,120,122,142,143,144,],[78,-62,-90,78,78,78,78,78,-84,78,-83,-69,-62,-70,-71,-72,78,78,78,78,-64,-87,-88,-89,]),'DOTMUL':([30,32,40,53,60,62,64,66,81,83,85,110,111,114,115,116,117,118,119,120,122,142,143,144,],[79,-62,-90,79,79,79,79,79,-84,79,-83,-69,-62,-70,-71,-72,79,79,79,79,-64,-87,-88,-89,]),'DOTDIV':([30,32,40,53,60,62,64,66,81,83,85,110,111,114,115,116,117,118,119,120,122,142,143,144,],[80,-62,-90,80,80,80,80,80,-84,80,-83,-69,-62,-70,-71,-72,80,80,80,80,-64,-87,-88,-89,]),'TRANSPOSE':([30,32,40,53,60,62,64,66,81,83,85,110,111,114,115,116,117,118,119,120,122,142,143,144,],[81,-62,-90,81,81,81,81,81,-84,81,-83,-69,-62,-70,-71,-72,81,81,81,81,-64,-87,-88,-89,]),'RPAREN':([32,35,36,40,46,48,67,81,82,83,84,85,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,123,124,125,132,133,134,135,136,137,142,143,144,171,199,],[-61,-85,-86,-90,91,-61,104,-84,121,122,-82,-83,-65,-66,-67,-68,-69,-62,-70,-71,-72,-73,-74,-75,-76,-63,-64,142,143,144,-36,-37,-38,-39,-40,-41,-87,-88,-89,174,200,]),'EQUALITY':([35,36,47,48,84,106,107,108,109,121,],[-85,-86,92,-61,-82,-65,-66,-67,-68,-63,]),'INEQUALITY':([35,36,47,48,84,106,107,108,109,121,],[-85,-86,93,-61,-82,-65,-66,-67,-68,-63,]),'GREATER':([35,36,47,48,84,106,107,108,109,121,],[-85,-86,94,-61,-82,-65,-66,-67,-68,-63,]),'GREATER_EQUAL':([35,36,47,48,84,106,107,108,109,121,],[-85,-86,95,-61,-82,-65,-66,-67,-68,-63,]),'LESS':([35,36,47,48,84,106,107,108,109,121,],[-85,-86,96,-61,-82,-65,-66,-67,-68,-63,]),'LESS_EQUAL':([35,36,47,48,84,106,107,108,109,121,],[-85,-86,97,-61,-82,-65,-66,-67,-68,-63,]),'RANGE':([35,36,48,84,98,106,107,108,109,121,],[-85,-86,-61,-82,138,-65,-66,-67,-68,-63,]),'ELSE':([139,158,167,168,175,185,186,187,193,194,196,198,],[155,-35,-33,-34,181,-30,-31,-32,-28,-29,-30,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_statements':([0,1,14,43,89,90,127,140,145,146,156,159,169,170,172,173,176,182,184,190,],[1,14,14,90,90,14,146,156,146,14,14,146,146,146,146,146,184,146,14,146,]),'statements':([0,1,2,14,15,17,43,89,90,127,140,145,146,156,159,169,170,172,173,176,182,184,190,],[3,3,16,3,42,44,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'loop_statement':([0,1,14,43,89,90,91,127,140,145,146,153,156,159,169,170,172,173,176,182,184,190,],[4,4,4,4,4,4,131,4,4,4,4,131,4,4,4,4,4,4,4,4,4,4,]),'if_statement':([0,1,14,43,89,90,127,140,145,146,155,156,159,169,170,172,173,176,182,184,190,],[5,5,5,5,5,5,5,5,5,5,166,5,5,5,5,5,5,5,5,5,5,]),'statement':([0,1,2,14,15,17,43,89,90,91,104,127,140,145,146,153,155,156,159,169,170,172,173,174,176,181,182,184,190,200,],[6,6,6,6,6,6,6,6,6,128,141,6,6,6,6,128,141,6,6,6,6,6,6,177,6,191,6,6,6,191,]),'return_statement':([0,1,2,14,15,17,43,89,90,91,104,127,140,145,146,153,155,156,159,169,170,172,173,174,176,181,182,184,190,200,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'print_expression':([11,68,],[27,105,]),'expression':([11,13,68,],[28,41,28,]),'num_expression':([11,13,18,20,22,23,24,25,26,33,34,45,49,50,54,55,56,57,58,68,69,70,71,72,92,93,94,95,96,97,138,163,197,],[29,29,47,52,59,61,63,65,47,82,84,82,84,98,99,100,101,102,103,29,106,107,108,109,132,133,134,135,136,137,153,47,47,]),'matrix_expression':([11,13,20,22,23,24,25,33,34,68,73,74,75,76,77,78,79,80,112,113,],[30,30,53,60,62,64,66,83,85,30,110,114,115,116,117,118,119,120,83,85,]),'condition':([18,26,163,197,],[46,67,171,199,]),'loop_instruction_statement':([91,153,],[126,164,]),'instruction_statement':([104,155,174,],[139,165,139,]),'main_statements_break_continue':([127,145,159,169,170,172,173,176,182,190,],[145,159,159,172,173,159,159,182,159,182,]),'if_break_continue':([127,145,159,169,170,172,173,176,181,182,190,],[147,147,147,147,147,147,147,147,189,147,147,]),'empty':([127,140,145,159,169,170,172,173,176,182,190,],[148,157,148,148,148,148,148,148,183,148,195,]),'else_statement':([139,],[154,]),'instruction_statement_break_continue':([174,181,200,],[175,188,175,]),'else_break_continue':([175,],[180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_statements","S'",1,None,None,None),
  ('main_statements -> LPARENCURLY statements RPARENCURLY main_statements','main_statements',4,'p_main_statements','Mparser.py',23),
  ('main_statements -> main_statements LPARENCURLY statements RPARENCURLY','main_statements',4,'p_main_statements','Mparser.py',24),
  ('main_statements -> main_statements main_statements','main_statements',2,'p_main_statements','Mparser.py',25),
  ('main_statements -> statements','main_statements',1,'p_main_statements','Mparser.py',26),
  ('main_statements -> loop_statement','main_statements',1,'p_loop_statement','Mparser.py',30),
  ('loop_statement -> WHILE LPAREN condition RPAREN loop_instruction_statement','loop_statement',5,'p_while_for','Mparser.py',34),
  ('loop_statement -> FOR ID ASSIGN num_expression RANGE num_expression loop_instruction_statement','loop_statement',7,'p_while_for','Mparser.py',35),
  ('main_statements -> if_statement','main_statements',1,'p_if','Mparser.py',39),
  ('else_statement -> ELSE instruction_statement','else_statement',2,'p_else_statement','Mparser.py',43),
  ('else_statement -> ELSE if_statement','else_statement',2,'p_else_statement','Mparser.py',44),
  ('if_statement -> IF LPAREN condition RPAREN instruction_statement','if_statement',5,'p_if_statement','Mparser.py',48),
  ('if_statement -> IF LPAREN condition RPAREN instruction_statement else_statement','if_statement',6,'p_if_statement','Mparser.py',49),
  ('loop_instruction_statement -> LPARENCURLY main_statements_break_continue RPARENCURLY','loop_instruction_statement',3,'p_loop_statements','Mparser.py',53),
  ('loop_instruction_statement -> statement SEMICOLON','loop_instruction_statement',2,'p_loop_statements','Mparser.py',54),
  ('loop_instruction_statement -> BREAK SEMICOLON','loop_instruction_statement',2,'p_loop_statements','Mparser.py',55),
  ('loop_instruction_statement -> CONTINUE SEMICOLON','loop_instruction_statement',2,'p_loop_statements','Mparser.py',56),
  ('loop_instruction_statement -> loop_statement','loop_instruction_statement',1,'p_loop_statements','Mparser.py',57),
  ('main_statements_break_continue -> main_statements','main_statements_break_continue',1,'p_main_statements_break_continue','Mparser.py',61),
  ('main_statements_break_continue -> if_break_continue','main_statements_break_continue',1,'p_main_statements_break_continue','Mparser.py',62),
  ('main_statements_break_continue -> main_statements_break_continue main_statements_break_continue','main_statements_break_continue',2,'p_main_statements_break_continue','Mparser.py',63),
  ('main_statements_break_continue -> main_statements_break_continue CONTINUE SEMICOLON main_statements_break_continue','main_statements_break_continue',4,'p_main_statements_break_continue','Mparser.py',64),
  ('main_statements_break_continue -> main_statements_break_continue BREAK SEMICOLON main_statements_break_continue','main_statements_break_continue',4,'p_main_statements_break_continue','Mparser.py',65),
  ('main_statements_break_continue -> empty','main_statements_break_continue',1,'p_main_statements_break_continue','Mparser.py',66),
  ('else_break_continue -> ELSE instruction_statement_break_continue','else_break_continue',2,'p_else_break_continue','Mparser.py',70),
  ('else_break_continue -> ELSE if_break_continue','else_break_continue',2,'p_else_break_continue','Mparser.py',71),
  ('if_break_continue -> IF LPAREN condition RPAREN instruction_statement_break_continue','if_break_continue',5,'p_if_break_continue','Mparser.py',75),
  ('if_break_continue -> IF LPAREN condition RPAREN instruction_statement_break_continue else_break_continue','if_break_continue',6,'p_if_break_continue','Mparser.py',76),
  ('instruction_statement_break_continue -> LPARENCURLY main_statements_break_continue RPARENCURLY','instruction_statement_break_continue',3,'p_instruction_statement_break_continue','Mparser.py',80),
  ('instruction_statement_break_continue -> LPARENCURLY empty RPARENCURLY','instruction_statement_break_continue',3,'p_instruction_statement_break_continue','Mparser.py',81),
  ('instruction_statement_break_continue -> statement SEMICOLON','instruction_statement_break_continue',2,'p_instruction_statement_break_continue','Mparser.py',82),
  ('instruction_statement_break_continue -> BREAK SEMICOLON','instruction_statement_break_continue',2,'p_instruction_statement_break_continue','Mparser.py',83),
  ('instruction_statement_break_continue -> CONTINUE SEMICOLON','instruction_statement_break_continue',2,'p_instruction_statement_break_continue','Mparser.py',84),
  ('instruction_statement -> LPARENCURLY main_statements RPARENCURLY','instruction_statement',3,'p_instruction_statement','Mparser.py',88),
  ('instruction_statement -> LPARENCURLY empty RPARENCURLY','instruction_statement',3,'p_instruction_statement','Mparser.py',89),
  ('instruction_statement -> statement SEMICOLON','instruction_statement',2,'p_instruction_statement','Mparser.py',90),
  ('condition -> num_expression EQUALITY num_expression','condition',3,'p_condition','Mparser.py',94),
  ('condition -> num_expression INEQUALITY num_expression','condition',3,'p_condition','Mparser.py',95),
  ('condition -> num_expression GREATER num_expression','condition',3,'p_condition','Mparser.py',96),
  ('condition -> num_expression GREATER_EQUAL num_expression','condition',3,'p_condition','Mparser.py',97),
  ('condition -> num_expression LESS num_expression','condition',3,'p_condition','Mparser.py',98),
  ('condition -> num_expression LESS_EQUAL num_expression','condition',3,'p_condition','Mparser.py',99),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','Mparser.py',103),
  ('statements -> statement SEMICOLON','statements',2,'p_statements','Mparser.py',104),
  ('statement -> PRINT print_expression','statement',2,'p_print','Mparser.py',108),
  ('print_expression -> expression','print_expression',1,'p_print_expression','Mparser.py',112),
  ('print_expression -> print_expression COMMA print_expression','print_expression',3,'p_print_expression','Mparser.py',113),
  ('expression -> num_expression','expression',1,'p_expression','Mparser.py',117),
  ('expression -> matrix_expression','expression',1,'p_expression','Mparser.py',118),
  ('expression -> STRING','expression',1,'p_expression','Mparser.py',119),
  ('statement -> ID ASSIGN STRING','statement',3,'p_assign_string','Mparser.py',123),
  ('statement -> ID MATRIX ASSIGN num_expression','statement',4,'p_assign_cell_mmatrix','Mparser.py',127),
  ('statement -> ID MATRIX ADDASSIGN num_expression','statement',4,'p_assign_cell_matrix_compound','Mparser.py',131),
  ('statement -> ID MATRIX SUBASSIGN num_expression','statement',4,'p_assign_cell_matrix_compound','Mparser.py',132),
  ('statement -> ID MATRIX MULASSIGN num_expression','statement',4,'p_assign_cell_matrix_compound','Mparser.py',133),
  ('statement -> ID MATRIX DIVASSIGN num_expression','statement',4,'p_assign_cell_matrix_compound','Mparser.py',134),
  ('statement -> ID ASSIGN num_expression','statement',3,'p_assign_num','Mparser.py',138),
  ('statement -> ID ADDASSIGN num_expression','statement',3,'p_assign_num_compound','Mparser.py',142),
  ('statement -> ID SUBASSIGN num_expression','statement',3,'p_assign_num_compound','Mparser.py',143),
  ('statement -> ID MULASSIGN num_expression','statement',3,'p_assign_num_compound','Mparser.py',144),
  ('statement -> ID DIVASSIGN num_expression','statement',3,'p_assign_num_compound','Mparser.py',145),
  ('num_expression -> ID','num_expression',1,'p_num_expression_name','Mparser.py',149),
  ('matrix_expression -> ID','matrix_expression',1,'p_matrix_expression_name','Mparser.py',153),
  ('num_expression -> LPAREN num_expression RPAREN','num_expression',3,'p_num_expression_group','Mparser.py',157),
  ('matrix_expression -> LPAREN matrix_expression RPAREN','matrix_expression',3,'p_matrix_expression_group','Mparser.py',161),
  ('num_expression -> num_expression ADD num_expression','num_expression',3,'p_num_expression_binop','Mparser.py',165),
  ('num_expression -> num_expression SUB num_expression','num_expression',3,'p_num_expression_binop','Mparser.py',166),
  ('num_expression -> num_expression MUL num_expression','num_expression',3,'p_num_expression_binop','Mparser.py',167),
  ('num_expression -> num_expression DIV num_expression','num_expression',3,'p_num_expression_binop','Mparser.py',168),
  ('matrix_expression -> matrix_expression ADD matrix_expression','matrix_expression',3,'p_matrix_expression_binop','Mparser.py',172),
  ('matrix_expression -> matrix_expression SUB matrix_expression','matrix_expression',3,'p_matrix_expression_binop','Mparser.py',173),
  ('matrix_expression -> matrix_expression MUL matrix_expression','matrix_expression',3,'p_matrix_expression_binop','Mparser.py',174),
  ('matrix_expression -> matrix_expression DIV matrix_expression','matrix_expression',3,'p_matrix_expression_binop','Mparser.py',175),
  ('matrix_expression -> matrix_expression DOTADD matrix_expression','matrix_expression',3,'p_matrix_expression_binop_element_wise','Mparser.py',179),
  ('matrix_expression -> matrix_expression DOTSUB matrix_expression','matrix_expression',3,'p_matrix_expression_binop_element_wise','Mparser.py',180),
  ('matrix_expression -> matrix_expression DOTMUL matrix_expression','matrix_expression',3,'p_matrix_expression_binop_element_wise','Mparser.py',181),
  ('matrix_expression -> matrix_expression DOTDIV matrix_expression','matrix_expression',3,'p_matrix_expression_binop_element_wise','Mparser.py',182),
  ('statement -> ID ASSIGN matrix_expression','statement',3,'p_matrix_assign','Mparser.py',186),
  ('statement -> ID ADDASSIGN matrix_expression','statement',3,'p_matrix_assign_compound','Mparser.py',190),
  ('statement -> ID SUBASSIGN matrix_expression','statement',3,'p_matrix_assign_compound','Mparser.py',191),
  ('statement -> ID MULASSIGN matrix_expression','statement',3,'p_matrix_assign_compound','Mparser.py',192),
  ('statement -> ID DIVASSIGN matrix_expression','statement',3,'p_matrix_assign_compound','Mparser.py',193),
  ('num_expression -> SUB num_expression','num_expression',2,'p_num_expression_uminus','Mparser.py',197),
  ('matrix_expression -> SUB matrix_expression','matrix_expression',2,'p_matrix_expression_uminus','Mparser.py',201),
  ('matrix_expression -> matrix_expression TRANSPOSE','matrix_expression',2,'p_matrix_transpose','Mparser.py',205),
  ('num_expression -> INTNUM','num_expression',1,'p_num_expression','Mparser.py',209),
  ('num_expression -> FLOATNUM','num_expression',1,'p_num_expression','Mparser.py',210),
  ('matrix_expression -> ZEROS LPAREN INTNUM RPAREN','matrix_expression',4,'p_matrix_zeros_expression','Mparser.py',214),
  ('matrix_expression -> ONES LPAREN INTNUM RPAREN','matrix_expression',4,'p_matrix_ones_expression','Mparser.py',218),
  ('matrix_expression -> EYE LPAREN INTNUM RPAREN','matrix_expression',4,'p_matrix_eye_expression','Mparser.py',222),
  ('matrix_expression -> MATRIX','matrix_expression',1,'p_matrix_explicit','Mparser.py',226),
  ('statement -> return_statement','statement',1,'p_return','Mparser.py',230),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','Mparser.py',234),
  ('empty -> <empty>','empty',0,'p_empty','Mparser.py',238),
]
